{"id":"node_modules/@stablelib/hash/lib/hash.js","dependencies":[{"name":"/Users/tamaz/Projects/Site/example/web-examples/dapps/ethereum-provider/node_modules/@stablelib/hash/lib/hash.js.map","includedInParent":true,"mtime":1721477767183},{"name":"/Users/tamaz/Projects/Site/example/web-examples/dapps/ethereum-provider/node_modules/@stablelib/hash/hash.ts","includedInParent":true,"mtime":1721477767183},{"name":"/Users/tamaz/Projects/Site/example/web-examples/dapps/ethereum-provider/package.json","includedInParent":true,"mtime":1721990127148},{"name":"/Users/tamaz/Projects/Site/example/web-examples/dapps/ethereum-provider/node_modules/@stablelib/hash/package.json","includedInParent":true,"mtime":1721477767183}],"generated":{"js":"\"use strict\";\n// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction isSerializableHash(h) {\n    return (typeof h.saveState !== \"undefined\" &&\n        typeof h.restoreState !== \"undefined\" &&\n        typeof h.cleanSavedState !== \"undefined\");\n}\nexports.isSerializableHash = isSerializableHash;\n// TODO(dchest): figure out the standardized interface for XOF such as\n// SHAKE and BLAKE2X.\n"},"sourceMaps":{"js":{"version":3,"file":"hash.js","sourceRoot":"","sources":["../hash.ts"],"names":[],"mappings":";AAAA,sCAAsC;AACtC,6CAA6C;;AA0B7C,SAAgB,kBAAkB,CAAC,CAAO;IACtC,OAAO,CACH,OAAQ,CAAsB,CAAC,SAAS,KAAK,WAAW;QACxD,OAAQ,CAAsB,CAAC,YAAY,KAAK,WAAW;QAC3D,OAAQ,CAAsB,CAAC,eAAe,KAAK,WAAW,CACjE,CAAC;AACN,CAAC;AAND,gDAMC;AAED,sEAAsE;AACtE,qBAAqB","sourcesContent":["// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\n/**\n * Package hash provides interface for hash functions.\n */\n\n/**\n * Hash interface describes properties of\n * cryptographic hash functions.\n */\nexport interface Hash {\n    readonly digestLength: number;\n    readonly blockSize: number;\n    update(data: Uint8Array): this;\n    reset(): this;\n    finish(out: Uint8Array): this;\n    digest(): Uint8Array;\n    clean(): void;\n}\n\nexport interface SerializableHash extends Hash {\n    saveState(): any;\n    restoreState(savedState: any): this;\n    cleanSavedState(savedState: any): void;\n}\n\nexport function isSerializableHash(h: Hash): h is SerializableHash {\n    return (\n        typeof (h as SerializableHash).saveState !== \"undefined\" &&\n        typeof (h as SerializableHash).restoreState !== \"undefined\" &&\n        typeof (h as SerializableHash).cleanSavedState !== \"undefined\"\n    );\n}\n\n// TODO(dchest): figure out the standardized interface for XOF such as\n// SHAKE and BLAKE2X.\n"]}},"error":null,"hash":"7f96995708687f94a557ff0a4c025e70","cacheData":{"env":{}}}